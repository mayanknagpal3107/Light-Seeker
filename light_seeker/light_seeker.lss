
light_seeker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000039e  00000432  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000125  008000a0  008000a0  00000472  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000472  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000113  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000058d  00000000  00000000  000005a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000289  00000000  00000000  00000b32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000060d  00000000  00000000  00000dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  000013c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000021c  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000170  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__vector_11>
  18:	4b c0       	rjmp	.+150    	; 0xb0 <__vector_12>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e9       	ldi	r30, 0x9E	; 158
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 3a       	cpi	r26, 0xA0	; 160
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	a0 ea       	ldi	r26, 0xA0	; 160
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a5 3c       	cpi	r26, 0xC5	; 197
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	e5 d0       	rcall	.+458    	; 0x224 <main>
  5a:	9f c1       	rjmp	.+830    	; 0x39a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_11>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	2f 93       	push	r18
  6a:	8f 93       	push	r24
  6c:	9f 93       	push	r25
  6e:	ef 93       	push	r30
  70:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
  72:	9b b1       	in	r25, 0x0b	; 11
    data = UART0_DATA;
  74:	2c b1       	in	r18, 0x0c	; 12
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  76:	e0 91 c2 01 	lds	r30, 0x01C2
  7a:	ef 5f       	subi	r30, 0xFF	; 255
    
    if ( tmphead == UART_RxTail ) {
  7c:	80 91 c3 01 	lds	r24, 0x01C3
  80:	e8 17       	cp	r30, r24
  82:	11 f4       	brne	.+4      	; 0x88 <__vector_11+0x2a>
  84:	82 e0       	ldi	r24, 0x02	; 2
  86:	08 c0       	rjmp	.+16     	; 0x98 <__vector_11+0x3a>
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
  88:	89 2f       	mov	r24, r25
  8a:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  8c:	e0 93 c2 01 	sts	0x01C2, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	e0 54       	subi	r30, 0x40	; 64
  94:	ff 4f       	sbci	r31, 0xFF	; 255
  96:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
  98:	80 93 c4 01 	sts	0x01C4, r24
}
  9c:	ff 91       	pop	r31
  9e:	ef 91       	pop	r30
  a0:	9f 91       	pop	r25
  a2:	8f 91       	pop	r24
  a4:	2f 91       	pop	r18
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <__vector_12>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
  c2:	90 91 c0 01 	lds	r25, 0x01C0
  c6:	80 91 c1 01 	lds	r24, 0x01C1
  ca:	98 17       	cp	r25, r24
  cc:	61 f0       	breq	.+24     	; 0xe6 <__vector_12+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
  ce:	e0 91 c1 01 	lds	r30, 0x01C1
  d2:	ef 5f       	subi	r30, 0xFF	; 255
  d4:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
  d6:	e0 93 c1 01 	sts	0x01C1, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	e0 56       	subi	r30, 0x60	; 96
  de:	ff 4f       	sbci	r31, 0xFF	; 255
  e0:	80 81       	ld	r24, Z
  e2:	8c b9       	out	0x0c, r24	; 12
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <__vector_12+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
  e6:	55 98       	cbi	0x0a, 5	; 10
    }
}
  e8:	ff 91       	pop	r31
  ea:	ef 91       	pop	r30
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <clearBuffer>:


//Try to clear the already buffered data
void clearBuffer(){
	
	UART_RxHead = 0;
  fa:	10 92 c2 01 	sts	0x01C2, r1
    UART_RxTail = 0;
  fe:	10 92 c3 01 	sts	0x01C3, r1
}
 102:	08 95       	ret

00000104 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
 104:	9c 01       	movw	r18, r24
    UART_TxHead = 0;
 106:	10 92 c0 01 	sts	0x01C0, r1
    UART_TxTail = 0;
 10a:	10 92 c1 01 	sts	0x01C1, r1
    UART_RxHead = 0;
 10e:	10 92 c2 01 	sts	0x01C2, r1
    UART_RxTail = 0;
 112:	10 92 c3 01 	sts	0x01C3, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 116:	97 ff       	sbrs	r25, 7
 118:	03 c0       	rjmp	.+6      	; 0x120 <uart_init+0x1c>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	8b b9       	out	0x0b, r24	; 11
    	 baudrate &= ~0x8000;
 11e:	3f 77       	andi	r19, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 120:	30 bd       	out	0x20, r19	; 32
    UBRRL = (unsigned char) baudrate;
 122:	29 b9       	out	0x09, r18	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 124:	88 e9       	ldi	r24, 0x98	; 152
 126:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 128:	86 e8       	ldi	r24, 0x86	; 134
 12a:	80 bd       	out	0x20, r24	; 32
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 12c:	08 95       	ret

0000012e <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 12e:	90 91 c2 01 	lds	r25, 0x01C2
 132:	80 91 c3 01 	lds	r24, 0x01C3
 136:	98 17       	cp	r25, r24
 138:	19 f4       	brne	.+6      	; 0x140 <uart_getc+0x12>
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	31 e0       	ldi	r19, 0x01	; 1
 13e:	11 c0       	rjmp	.+34     	; 0x162 <uart_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 140:	e0 91 c3 01 	lds	r30, 0x01C3
 144:	ef 5f       	subi	r30, 0xFF	; 255
    UART_RxTail = tmptail; 
 146:	e0 93 c3 01 	sts	0x01C3, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	e0 54       	subi	r30, 0x40	; 64
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	30 81       	ld	r19, Z
    
    return (UART_LastRxError << 8) + data;
 152:	20 91 c4 01 	lds	r18, 0x01C4
 156:	92 2f       	mov	r25, r18
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	ac 01       	movw	r20, r24
 15c:	43 0f       	add	r20, r19
 15e:	51 1d       	adc	r21, r1
 160:	9a 01       	movw	r18, r20

}/* uart_getc */
 162:	c9 01       	movw	r24, r18
 164:	08 95       	ret

00000166 <transmitByte>:


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 166:	5d 9b       	sbis	0x0b, 5	; 11
 168:	fe cf       	rjmp	.-4      	; 0x166 <transmitByte>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 16a:	8c b9       	out	0x0c, r24	; 12
}
 16c:	08 95       	ret

0000016e <uart_putc>:
}/* uart_getc */


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 16e:	5d 9b       	sbis	0x0b, 5	; 11
 170:	fe cf       	rjmp	.-4      	; 0x16e <uart_putc>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 172:	8c b9       	out	0x0c, r24	; 12
    /* enable UDRE interrupt */
    /*UART0_CONTROL    |= _BV(UART0_UDRIE);*/
	
	transmitByte(data);

}/* uart_putc */
 174:	08 95       	ret

00000176 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 176:	fc 01       	movw	r30, r24
 178:	04 c0       	rjmp	.+8      	; 0x182 <uart_puts+0xc>
}/* uart_getc */


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 17a:	5d 9b       	sbis	0x0b, 5	; 11
 17c:	fe cf       	rjmp	.-4      	; 0x17a <uart_puts+0x4>
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
      uart_putc(*s++);
 17e:	31 96       	adiw	r30, 0x01	; 1

void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 180:	8c b9       	out	0x0c, r24	; 12
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 182:	80 81       	ld	r24, Z
 184:	88 23       	and	r24, r24
 186:	c9 f7       	brne	.-14     	; 0x17a <uart_puts+0x4>
      uart_putc(*s++);

}/* uart_puts */
 188:	08 95       	ret

0000018a <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 18a:	03 c0       	rjmp	.+6      	; 0x192 <uart_puts_p+0x8>
}/* uart_getc */


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 18c:	5d 9b       	sbis	0x0b, 5	; 11
 18e:	fe cf       	rjmp	.-4      	; 0x18c <uart_puts_p+0x2>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 190:	2c b9       	out	0x0c, r18	; 12
 192:	fc 01       	movw	r30, r24
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	24 91       	lpm	r18, Z+
 198:	22 23       	and	r18, r18
 19a:	c1 f7       	brne	.-16     	; 0x18c <uart_puts_p+0x2>
      uart_putc(c);

}/* uart_puts_p */
 19c:	08 95       	ret

0000019e <forward>:


void forward()
{

sbi(PORTB,3);   //high ON PORTB 3
 19e:	c3 9a       	sbi	0x18, 3	; 24

sbi(PORTB,0);    //HIGH ON PORTB 0
 1a0:	c0 9a       	sbi	0x18, 0	; 24
cbi(PORTD,7);    //LOW ON PORTD 7
 1a2:	97 98       	cbi	0x12, 7	; 18

sbi(PORTB,5);   //HIGH ON PORTB 5
 1a4:	c5 9a       	sbi	0x18, 5	; 24
cbi(PORTB,4);   //LOW ON PORTB 4
 1a6:	c4 98       	cbi	0x18, 4	; 24
}
 1a8:	08 95       	ret

000001aa <reverse>:

void reverse()
{
sbi(PORTB,3);   //high ON PORTB 3
 1aa:	c3 9a       	sbi	0x18, 3	; 24

cbi(PORTB,0);    //LOW ON PORTB 0
 1ac:	c0 98       	cbi	0x18, 0	; 24
sbi(PORTD,7);    //HIGH ON PORTD 7
 1ae:	97 9a       	sbi	0x12, 7	; 18

cbi(PORTB,5);   //LOW ON PORTB 5
 1b0:	c5 98       	cbi	0x18, 5	; 24
sbi(PORTB,4);   //HIGH ON PORTB 4
 1b2:	c4 9a       	sbi	0x18, 4	; 24
}
 1b4:	08 95       	ret

000001b6 <left>:


void left()
{
sbi(PORTB,3);   //high ON PORTB 3
 1b6:	c3 9a       	sbi	0x18, 3	; 24

sbi(PORTB,0);    //HIGH ON PORTB 0
 1b8:	c0 9a       	sbi	0x18, 0	; 24
cbi(PORTD,7);    //LOW ON PORTD 7
 1ba:	97 98       	cbi	0x12, 7	; 18


cbi(PORTB,5);   //LOW ON PORTB 5
 1bc:	c5 98       	cbi	0x18, 5	; 24
sbi(PORTB,4);   //HIGH ON PORTB 4
 1be:	c4 9a       	sbi	0x18, 4	; 24
}
 1c0:	08 95       	ret

000001c2 <right>:

void right()
{
sbi(PORTB,3);   //high ON PORTB 3
 1c2:	c3 9a       	sbi	0x18, 3	; 24

sbi(PORTB,5);   //HIGH ON PORTB 5
 1c4:	c5 9a       	sbi	0x18, 5	; 24
cbi(PORTB,4);   //LOW ON PORTB 4
 1c6:	c4 98       	cbi	0x18, 4	; 24


cbi(PORTB,0);    //LOW ON PORTB 0
 1c8:	c0 98       	cbi	0x18, 0	; 24
sbi(PORTD,7);    //HIGH ON PORTD 7
 1ca:	97 9a       	sbi	0x12, 7	; 18
}
 1cc:	08 95       	ret

000001ce <stop>:

void stop()
{
cbi(PORTB,3);    //LOW ON PORTB 3
 1ce:	c3 98       	cbi	0x18, 3	; 24

cbi(PORTB,4);   //LOW ON PORTB 4
 1d0:	c4 98       	cbi	0x18, 4	; 24
cbi(PORTB,0);    //LOW ON PORTB 0
 1d2:	c0 98       	cbi	0x18, 0	; 24

cbi(PORTB,5);   //LOW ON PORTB 5
 1d4:	c5 98       	cbi	0x18, 5	; 24
cbi(PORTD,7);    //LOW ON PORTD 7
 1d6:	97 98       	cbi	0x12, 7	; 18
}
 1d8:	08 95       	ret

000001da <rightforward>:
void rightforward()
{
		sbi(PORTB,3);
 1da:	c3 9a       	sbi	0x18, 3	; 24
		
		cbi(PORTD,7);		
 1dc:	97 98       	cbi	0x12, 7	; 18
		sbi(PORTB,0);
 1de:	c0 9a       	sbi	0x18, 0	; 24
		
		cbi(PORTB,5);
 1e0:	c5 98       	cbi	0x18, 5	; 24
		cbi(PORTB,4);
 1e2:	c4 98       	cbi	0x18, 4	; 24
}
 1e4:	08 95       	ret

000001e6 <leftforward>:



void leftforward()
{
		sbi(PORTB,3);
 1e6:	c3 9a       	sbi	0x18, 3	; 24
		
		cbi(PORTD,7);		
 1e8:	97 98       	cbi	0x12, 7	; 18
		cbi(PORTB,0);
 1ea:	c0 98       	cbi	0x18, 0	; 24
		
		sbi(PORTB,5);
 1ec:	c5 9a       	sbi	0x18, 5	; 24
		cbi(PORTB,4);
 1ee:	c4 98       	cbi	0x18, 4	; 24

}
 1f0:	08 95       	ret

000001f2 <motorinit>:
void motorinit()
{

		sbi(DDRB,3); //enable
 1f2:	bb 9a       	sbi	0x17, 3	; 23
		
		sbi(DDRD,7);  //input1		
 1f4:	8f 9a       	sbi	0x11, 7	; 17
		sbi(DDRB,0);  //input2
 1f6:	b8 9a       	sbi	0x17, 0	; 23
		
		sbi(DDRB,5);   //input3
 1f8:	bd 9a       	sbi	0x17, 5	; 23
		sbi(DDRB,4);   //input4
 1fa:	bc 9a       	sbi	0x17, 4	; 23
		

}
 1fc:	08 95       	ret

000001fe <readADC>:


int readADC(int channel){
	int w;
		
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
 1fe:	96 b1       	in	r25, 0x06	; 6
 200:	97 60       	ori	r25, 0x07	; 7
 202:	96 b9       	out	0x06, r25	; 6

	ADMUX = channel;
 204:	87 b9       	out	0x07, r24	; 7
	
	ADMUX |= (1 << REFS0); // Set ADC reference to AVCC
 206:	3e 9a       	sbi	0x07, 6	; 7
	//ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading

	
	//ADCSRA |= (1 << ADFR);  // Se++t ADC to Free-Running 4
	ADCSRA |= (1 << ADEN);  // Enable ADC
 208:	37 9a       	sbi	0x06, 7	; 6
	
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions 
 20a:	36 9a       	sbi	0x06, 6	; 6
	
	
	 //Wait for conversion to complete
   while(!(ADCSRA & (1<<ADIF)));
 20c:	34 9b       	sbis	0x06, 4	; 6
 20e:	fe cf       	rjmp	.-4      	; 0x20c <readADC+0xe>

   //Clear ADIF by writing one to it
   ADCSRA|=(1<<ADIF);	
 210:	34 9a       	sbi	0x06, 4	; 6
	
	 w=ADCL;
 212:	24 b1       	in	r18, 0x04	; 4
 214:	30 e0       	ldi	r19, 0x00	; 0
     w|=(ADCH<<8);
 216:	45 b1       	in	r20, 0x05	; 5
 218:	94 2f       	mov	r25, r20
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	28 2b       	or	r18, r24
 21e:	39 2b       	or	r19, r25
 
     return w;
}
 220:	c9 01       	movw	r24, r18
 222:	08 95       	ret

00000224 <main>:


void main()
{
 224:	8f 92       	push	r8
 226:	9f 92       	push	r9
 228:	af 92       	push	r10
 22a:	bf 92       	push	r11
 22c:	cf 92       	push	r12
 22e:	df 92       	push	r13
 230:	ef 92       	push	r14
 232:	ff 92       	push	r15
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	df 93       	push	r29
 23a:	cf 93       	push	r28
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
 240:	28 97       	sbiw	r28, 0x08	; 8
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	f8 94       	cli
 246:	de bf       	out	0x3e, r29	; 62
 248:	0f be       	out	0x3f, r0	; 63
 24a:	cd bf       	out	0x3d, r28	; 61
   
DDRC=0x0f;
 24c:	8f e0       	ldi	r24, 0x0F	; 15
 24e:	84 bb       	out	0x14, r24	; 20
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
 250:	8f e2       	ldi	r24, 0x2F	; 47
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	57 df       	rcall	.-338    	; 0x104 <uart_init>
	sei();	
 256:	78 94       	sei
	int a,b;	
	char str[4],str1[4];
	motorinit();
 258:	cc df       	rcall	.-104    	; 0x1f2 <motorinit>
 25a:	80 e3       	ldi	r24, 0x30	; 48
 25c:	95 e7       	ldi	r25, 0x75	; 117
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 25e:	28 eb       	ldi	r18, 0xB8	; 184
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	f9 01       	movw	r30, r18
 264:	31 97       	sbiw	r30, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <main+0x40>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 268:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 26a:	d9 f7       	brne	.-10     	; 0x262 <main+0x3e>
	
	_delay_ms(3000);
	
	uart_puts("INITIALIZE THE SYSTEM");
 26c:	80 e6       	ldi	r24, 0x60	; 96
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	82 df       	rcall	.-252    	; 0x176 <uart_puts>
	{
		uart_puts("WELCOE\n\r");
		
		a= readADC(5);
		b= readADC(4);
		itoa(a,str,10);
 272:	5e 01       	movw	r10, r28
 274:	08 94       	sec
 276:	a1 1c       	adc	r10, r1
 278:	b1 1c       	adc	r11, r1
		itoa(b,str1,10);
 27a:	95 e0       	ldi	r25, 0x05	; 5
 27c:	c9 2e       	mov	r12, r25
 27e:	d1 2c       	mov	r13, r1
 280:	cc 0e       	add	r12, r28
 282:	dd 1e       	adc	r13, r29
 284:	88 eb       	ldi	r24, 0xB8	; 184
 286:	88 2e       	mov	r8, r24
 288:	91 2c       	mov	r9, r1
	
	uart_puts("INITIALIZE THE SYSTEM");
	
while(1)	
	{
		uart_puts("WELCOE\n\r");
 28a:	86 e7       	ldi	r24, 0x76	; 118
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	73 df       	rcall	.-282    	; 0x176 <uart_puts>
		
		a= readADC(5);
 290:	85 e0       	ldi	r24, 0x05	; 5
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	b4 df       	rcall	.-152    	; 0x1fe <readADC>
 296:	7c 01       	movw	r14, r24
		b= readADC(4);
 298:	84 e0       	ldi	r24, 0x04	; 4
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	b0 df       	rcall	.-160    	; 0x1fe <readADC>
 29e:	8c 01       	movw	r16, r24
		itoa(a,str,10);
 2a0:	c7 01       	movw	r24, r14
 2a2:	b5 01       	movw	r22, r10
 2a4:	4a e0       	ldi	r20, 0x0A	; 10
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	35 d0       	rcall	.+106    	; 0x314 <itoa>
		itoa(b,str1,10);
 2aa:	c8 01       	movw	r24, r16
 2ac:	b6 01       	movw	r22, r12
 2ae:	4a e0       	ldi	r20, 0x0A	; 10
 2b0:	50 e0       	ldi	r21, 0x00	; 0
 2b2:	30 d0       	rcall	.+96     	; 0x314 <itoa>
		uart_puts(str);
 2b4:	c5 01       	movw	r24, r10
 2b6:	5f df       	rcall	.-322    	; 0x176 <uart_puts>
		uart_puts("\t");
 2b8:	8f e7       	ldi	r24, 0x7F	; 127
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	5c df       	rcall	.-328    	; 0x176 <uart_puts>
		uart_puts(str1);
 2be:	c6 01       	movw	r24, r12
 2c0:	5a df       	rcall	.-332    	; 0x176 <uart_puts>
		uart_puts("\n\r");
 2c2:	81 e8       	ldi	r24, 0x81	; 129
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	57 df       	rcall	.-338    	; 0x176 <uart_puts>
		uart_puts("\n\r");
 2c8:	81 e8       	ldi	r24, 0x81	; 129
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	54 df       	rcall	.-344    	; 0x176 <uart_puts>
		
		
		
		
		
		 if((a<=80)&&(b>70))	
 2ce:	81 e5       	ldi	r24, 0x51	; 81
 2d0:	e8 16       	cp	r14, r24
 2d2:	f1 04       	cpc	r15, r1
 2d4:	5c f4       	brge	.+22     	; 0x2ec <main+0xc8>
 2d6:	07 34       	cpi	r16, 0x47	; 71
 2d8:	11 05       	cpc	r17, r1
 2da:	24 f0       	brlt	.+8      	; 0x2e4 <main+0xc0>
		{
		leftforward();
 2dc:	84 df       	rcall	.-248    	; 0x1e6 <leftforward>
		uart_puts("leftfor\n\r");
 2de:	84 e8       	ldi	r24, 0x84	; 132
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e c0       	rjmp	.+28     	; 0x300 <main+0xdc>
		
		}
		
		else if((a>=80)&&(b<=50))
 2e4:	80 e5       	ldi	r24, 0x50	; 80
 2e6:	e8 16       	cp	r14, r24
 2e8:	f1 04       	cpc	r15, r1
 2ea:	39 f4       	brne	.+14     	; 0x2fa <main+0xd6>
 2ec:	03 33       	cpi	r16, 0x33	; 51
 2ee:	11 05       	cpc	r17, r1
 2f0:	24 f4       	brge	.+8      	; 0x2fa <main+0xd6>
		{
		
		rightforward();
 2f2:	73 df       	rcall	.-282    	; 0x1da <rightforward>
		uart_puts("rigthfor\n\r");	
 2f4:	8e e8       	ldi	r24, 0x8E	; 142
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	03 c0       	rjmp	.+6      	; 0x300 <main+0xdc>
		}*/
		
		
		else 
		{
		forward();
 2fa:	51 df       	rcall	.-350    	; 0x19e <forward>
		uart_puts("stop\n\r");
 2fc:	89 e9       	ldi	r24, 0x99	; 153
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	3a df       	rcall	.-396    	; 0x176 <uart_puts>
 302:	80 ed       	ldi	r24, 0xD0	; 208
 304:	97 e0       	ldi	r25, 0x07	; 7
 306:	f4 01       	movw	r30, r8
 308:	31 97       	sbiw	r30, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <main+0xe4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 30c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 30e:	09 f4       	brne	.+2      	; 0x312 <main+0xee>
 310:	bc cf       	rjmp	.-136    	; 0x28a <main+0x66>
 312:	f9 cf       	rjmp	.-14     	; 0x306 <main+0xe2>

00000314 <itoa>:
 314:	fb 01       	movw	r30, r22
 316:	9f 01       	movw	r18, r30
 318:	e8 94       	clt
 31a:	42 30       	cpi	r20, 0x02	; 2
 31c:	bc f0       	brlt	.+46     	; 0x34c <itoa+0x38>
 31e:	45 32       	cpi	r20, 0x25	; 37
 320:	ac f4       	brge	.+42     	; 0x34c <itoa+0x38>
 322:	4a 30       	cpi	r20, 0x0A	; 10
 324:	29 f4       	brne	.+10     	; 0x330 <itoa+0x1c>
 326:	97 fb       	bst	r25, 7
 328:	1e f4       	brtc	.+6      	; 0x330 <itoa+0x1c>
 32a:	90 95       	com	r25
 32c:	81 95       	neg	r24
 32e:	9f 4f       	sbci	r25, 0xFF	; 255
 330:	64 2f       	mov	r22, r20
 332:	77 27       	eor	r23, r23
 334:	1e d0       	rcall	.+60     	; 0x372 <__udivmodhi4>
 336:	80 5d       	subi	r24, 0xD0	; 208
 338:	8a 33       	cpi	r24, 0x3A	; 58
 33a:	0c f0       	brlt	.+2      	; 0x33e <itoa+0x2a>
 33c:	89 5d       	subi	r24, 0xD9	; 217
 33e:	81 93       	st	Z+, r24
 340:	cb 01       	movw	r24, r22
 342:	00 97       	sbiw	r24, 0x00	; 0
 344:	a9 f7       	brne	.-22     	; 0x330 <itoa+0x1c>
 346:	16 f4       	brtc	.+4      	; 0x34c <itoa+0x38>
 348:	5d e2       	ldi	r21, 0x2D	; 45
 34a:	51 93       	st	Z+, r21
 34c:	10 82       	st	Z, r1
 34e:	c9 01       	movw	r24, r18
 350:	00 c0       	rjmp	.+0      	; 0x352 <strrev>

00000352 <strrev>:
 352:	dc 01       	movw	r26, r24
 354:	fc 01       	movw	r30, r24
 356:	67 2f       	mov	r22, r23
 358:	71 91       	ld	r23, Z+
 35a:	77 23       	and	r23, r23
 35c:	e1 f7       	brne	.-8      	; 0x356 <strrev+0x4>
 35e:	32 97       	sbiw	r30, 0x02	; 2
 360:	04 c0       	rjmp	.+8      	; 0x36a <strrev+0x18>
 362:	7c 91       	ld	r23, X
 364:	6d 93       	st	X+, r22
 366:	70 83       	st	Z, r23
 368:	62 91       	ld	r22, -Z
 36a:	ae 17       	cp	r26, r30
 36c:	bf 07       	cpc	r27, r31
 36e:	c8 f3       	brcs	.-14     	; 0x362 <strrev+0x10>
 370:	08 95       	ret

00000372 <__udivmodhi4>:
 372:	aa 1b       	sub	r26, r26
 374:	bb 1b       	sub	r27, r27
 376:	51 e1       	ldi	r21, 0x11	; 17
 378:	07 c0       	rjmp	.+14     	; 0x388 <__udivmodhi4_ep>

0000037a <__udivmodhi4_loop>:
 37a:	aa 1f       	adc	r26, r26
 37c:	bb 1f       	adc	r27, r27
 37e:	a6 17       	cp	r26, r22
 380:	b7 07       	cpc	r27, r23
 382:	10 f0       	brcs	.+4      	; 0x388 <__udivmodhi4_ep>
 384:	a6 1b       	sub	r26, r22
 386:	b7 0b       	sbc	r27, r23

00000388 <__udivmodhi4_ep>:
 388:	88 1f       	adc	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	5a 95       	dec	r21
 38e:	a9 f7       	brne	.-22     	; 0x37a <__udivmodhi4_loop>
 390:	80 95       	com	r24
 392:	90 95       	com	r25
 394:	bc 01       	movw	r22, r24
 396:	cd 01       	movw	r24, r26
 398:	08 95       	ret

0000039a <_exit>:
 39a:	f8 94       	cli

0000039c <__stop_program>:
 39c:	ff cf       	rjmp	.-2      	; 0x39c <__stop_program>
